@{
    ViewData["Title"] = "Bag Page";

    @model List<StripeCheckoutProduct>
}

<link rel="stylesheet" href="~/css/cart.css" />

@await Html.PartialAsync("_Navbar")

<script src="https://js.stripe.com/v3/"></script>

<main role="main">

    <h2 class="page-title">Shopping bag</h2>

    <div id="bagContainer" class="bag-container d-none">

        <section class="my-bag-grid">
            <div class="items-list">
                @*<span>YOUR SELECTIONS</span>*@
            </div>
        </section>

        <section class="checkout-grid">
            <div class="checkout-card card">
                <h3>ORDER SUMMARY</h3>

                <div class="summary-row">
                    <span class="text">Subtotal</span>
                    <span id="subtotal" class="value"></span>
                </div>

                <div class="summary-row">
                    <span class="text">Total</span>
                    <span id="total" class="value"></span>
                </div>

                <button id="stripe" class="stripe-checkout text-white btn btn-lg btn-primary">
                    Pay with Stripe
                </button>
            </div>
        </section>

    </div>

    <section id="emptyCartContainer" class="empty-cart-container d-none">
        <figure>
            <img src="~/assets/icons/bag.png" alt="Bag Icon" />
        </figure>

        YOUR SHOPPING BAG IS EMPTY

        <a class="discover text-white btn btn-lg btn-primary text-decoration-none" asp-area="" asp-controller="Product" asp-action="Index">
            Discover products
        </a>
    </section>

</main>

<!-- Combination PopUp / Modal -->
<button type="button" id="openCombinationProductModalBtn" data-bs-toggle="modal" data-bs-target="#combinationProductModal"></button>

<div class="modal fade" id="combinationProductModal" tabindex="-1" aria-labelledby="combinationProductModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="combinationProductModal">Combination available</h5>
            </div>
            <div class="modal-body">

                <p id="combinationTitle" class="combation-title"></p>

                <div class="products-container">
                    <div class="product-box">
                        <img id="productAImg" src="" class="product-image">
                    </div>

                    <img id="plusGif" src="~/assets/icons/plus-animated.gif" class="plus-icon" alt="Plus Icon Animated">

                    <div class="product-box">
                        <a id="productLink">
                            <img id="productBImg" src="" class="product-image">
                        </a>
                    </div>
                </div>

                <p id="combinationPrice" class="combation-price"></p>

            </div>
            <div class="modal-footer">
                <button id="cancelProductBtn" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="addProductBtn" type="button" class="btn btn-primary">Add new product</button>
            </div>
        </div>
    </div>
</div>

<div id="modalBackground" class="modal-backdrop fade d-none"></div>

<!-- Scripts -->
<script>
    // DATA
    const cart = JSON.parse(sessionStorage.getItem("cart"));

    // ELEMENTS
    const bagContainer = document.getElementById("bagContainer");
    const emptyCartContainer = document.getElementById("emptyCartContainer");

    // Show Items in Cart
    if (cart && cart.length) {
        const itemList = document.querySelector(".items-list");
        const itemsHTML = []

        // Summary
        let subtotal = 0;
        let total = 0;

        // ===== INTEGRATING CHECKOUTS =====
        // Stripe
        const stripeBtn = document.getElementById("stripe");
        const STRIPE_KEY = {
            public: "pk_test_51NLBoTLt7BjNwVdwfeA3g3acYSuf56Xj8dSoJLObze0pcpfBVj2br1mC0Hsedn6jtSv24Uml8SyZ6Z6BlsMOrxo700G4dNMgdd",
            secret: "sk_test_51NLBoTLt7BjNwVdwMqyC9xYzLXK6pq3oCk76MeQsQqDvUfjNBrPYUdFthuWGlo4v88xavjMuoulZx14VQkNWzvFX00kq3BhtYS"
        };
        const stripe = Stripe(STRIPE_KEY.public);
        const stripeDBProducts = @Html.Raw(Json.Serialize(Model));
        const stripeProducts = [];
        const productCombinations = {};

        cart.forEach(async (item, index) => {
            const html = `<div id="item-${index + 1}" class="item card shadow-sm">
                <div class="grid-img">
                    <a class="text-decoration-none" href="/Product/Detail?productId=${item.id}">
                        <figure>
                            <img src="${item.image}" />
                        </figure>
                    </a>
                </div>
                <div class="grid-info">

                    <div class="item-info">
                        <p id="item-${index + 1}-title" class="title">${item.name}</p>
                        <p id="item-${index + 1}-price" class="price"><b>Price:</b> $${item.price}</p>
                        <p id="item-${index + 1}-quantity" class="quantity"><b>Quantity:</b> ${item.quantity}</p>
                    </div>

                    <div class="item-options">
                        <button type="button" class="delete-item btn btn-danger" data-id="${item.id}" data-code="${item.code}" onclick="deleteItem(${item.id})">
                            <img src="${window.location.protocol}//${window.location.hostname}:${window.location.port}/assets/icons/trash.png" alt="Trash Icon" />
                        </button>
                    </div>

                </div>
            </div>`;
            // UI
            subtotal += Number(item.price) * Number(item.quantity);
            itemsHTML.push(html);
            // Combinations
            const productCombination = await getProductCombination(item.code);
            if (productCombination) productCombinations[item.code] = productCombination;
        });

        // SET SUMMERY
        subtotal = subtotal.toFixed(2);
        total = subtotal;

        updateSubTotalPriceElem(subtotal);
        updateTotalPriceElem(total);

        stripeBtn.onclick = async () => {
            stripeBtn.disabled = true;
            // Show Product Combination
            let count = 0
            for (const [key, value] of Object.entries(productCombinations)) {
                const currCart = JSON.parse(sessionStorage.getItem("cart"));
                const productA = currCart.find(item => item.code === key);
                const productB = value;
                await showCombinationModal(productA, productB, count);
                count++;
            }
            stripeBtn.textContent = "Loading...";
            // Create Stripe Product IDs
            let checkoutProduct = null;
            const updatedCart = JSON.parse(sessionStorage.getItem("cart"));
            for (const item of updatedCart) {
                const stripeProduct = await createStripeProduct({ name: item.name, price: item.price, image: item.image });
                if (stripeProduct) {
                    // TODO: ADD Product TO DB
                    stripeProducts.push({ price: stripeProduct.default_price.id, quantity: item.quantity });
                }
            }
            if (!stripeProducts || !stripeProducts.length) {
                alert('Error creating the Stripe checkout');
                return;
            }
            try {
                stripe.redirectToCheckout({
                    lineItems: stripeProducts,
                    mode: 'payment',
                    successUrl: 'https://localhost:7056/Success',
                    cancelUrl: 'https://localhost:7056/Cart',
                });
            } catch (error) {
                console.error('Error redirecting to stripe checkout:', error);
            }
        };

        itemList.innerHTML = itemsHTML.join('');

        bagContainer.classList.toggle("d-none");

        // ===== FUNCTIONS ====
        async function createStripeProduct({ name, price, image }) {
            try {
                const parsedPrice = price.replace(",", ".");
                const unitAmount = parseInt(Number(parsedPrice) * 100);
                const response = await fetch("https://api.stripe.com/v1/products", {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${STRIPE_KEY.secret}`,
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'name': name,
                        'images[0]': image,
                        'default_price_data[unit_amount]': unitAmount, // E.G (Before the parseFloat) = 34,99 || parseFloat(price)
                        'default_price_data[currency]': 'usd',
                        // 'default_price_data[recurring][interval]': 'month', For Suscriptions
                        'expand[]': 'default_price',
                    }),
                });
                const product = await response.json();
                if (product?.error) {
                    console.error('Error creating product:', product.error);
                    return null;
                }
                return product;
            } catch (error) {
                console.error('Error creating product:', error);
            }
        };

        function deleteItem(id) {
            const cartStored = JSON.parse(sessionStorage.getItem("cart"));
            if (!cartStored) {
                alert('Error: Empty cart');
                return;
            }

            const itemIndex = cartStored.findIndex((item) => item.id == id);
            if (itemIndex === -1) {
                alert('Error: The item not found');
                return;
            }

            cartStored.splice(itemIndex, 1);
            sessionStorage.setItem("cart", JSON.stringify(cartStored));
            location.reload();
        }

        function getProductCombination(productCode) {
            return new Promise(async (resolve, reject) => {
                try {
                    const productCombinableCode = await getCombinableProductCode(productCode);
                    if (productCombinableCode?.error || !productCombinableCode?.length) {
                        console.warn('Not combinable product for the product code: ' + productCode);
                        resolve();
                        return;
                    }
                    // Check is product combination in cart
                    const isProductAlreadyInCart = isProductCombinationInCart(productCombinableCode[0]);
                    if (isProductAlreadyInCart) resolve(null);
                    const productCombinableData = await getCombinableProductData(productCombinableCode);
                    if (productCombinableData?.error || !productCombinableData) {
                        console.error('Error fetching combinable product data:', productCombinableData?.error);
                        reject(null);
                    }

                    resolve(productCombinableData);
                } catch (err) {
                    reject(err);
                }
            });
        }

        function getCombinableProductCode(code) {
            return new Promise(async (resovle, reject) => {
                try {
                    const data = await fetch(`@Url.Action("GetCombinableProductCodes", "Product")?productCode=${code}`);
                    const res = await data.json();
                    resovle(res);
                } catch (e) {
                    reject(e);
                }
            });
        }

        function getCombinableProductData(code) {
            return new Promise(async (resovle, reject) => {
                try {
                    const data = await fetch(`@Url.Action("GetProductByCodeEndpoint", "Product")?productCode=${code}`);
                    const res = await data.json();
                    resovle(res);
                } catch (e) {
                    reject(e);
                }
            });
        }

        function showCombinationModal(productA, productB, count) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    // const toggleModalBtn = document.getElementById('openCombinationProductModalBtn');
                    const modalBackgroundElem = document.getElementById('modalBackground');
                    modalBackgroundElem.classList.toggle("show");
                    modalBackgroundElem.classList.toggle("d-none");

                    const modal = document.getElementById('combinationProductModal');
                    modal.classList.toggle("show");
                    modal.classList.toggle("d-block");

                    if (modal) {
                        // toggleModalBtn.click();

                        // Set Data
                        const combinationTitle = document.getElementById('combinationTitle');
                        if (combinationTitle) combinationTitle.innerHTML = `The <b>${productA.name}</b> is a good mix with <b>${productB.name}</b>, do you want to add it to the purchase?`;

                        const productAImg = document.getElementById('productAImg');
                        if (combinationTitle) productAImg.src = productA.image;

                        const productBImg = document.getElementById('productBImg');
                        if (combinationTitle) productBImg.src = productB.image;

                        const combinationPrice = document.getElementById('combinationPrice');
                        if (combinationPrice) combinationPrice.innerHTML = `Price: <b>${productB.price}</b>$`;

                        const productCombinationLink = document.getElementById('productLink');
                        if (productCombinationLink) productCombinationLink.href = `/Product/Detail?productId=${productB.id}`;

                        // Set Events
                        const addProductBtn = document.getElementById('addProductBtn');
                        addProductBtn.onclick = () => {
                            const cart = JSON.parse(sessionStorage.getItem("cart"));
                            const newProduct = { id: String(productB.id), code: productB.code, name: productB.name, image: productB.image, price: String(productB.price), quantity: 1 };
                            cart.push(newProduct);
                            sessionStorage.setItem("cart", JSON.stringify(cart));
                            // Update Prices
                            updateSubTotalPriceElem(productB.price);
                            updateTotalPriceElem(productB.price);
                            updateCartNumber();
                            // toggleModalBtn.click();
                            modalBackgroundElem.classList.toggle("d-none");
                            modalBackgroundElem.classList.toggle("show");
                            modal.classList.toggle("show");
                            modal.classList.toggle("d-block");
                            resolve();
                        }

                        cancelProductBtn = document.getElementById('cancelProductBtn');
                        cancelProductBtn.onclick = () => {
                            // toggleModalBtn.click();
                            modalBackgroundElem.classList.toggle("d-none");
                            modalBackgroundElem.classList.toggle("show");
                            modal.classList.toggle("show");
                            modal.classList.toggle("d-block");
                            resolve();
                        }
                    }
                }, (count > 1) ? 2500 : 0);      
            });
        }

        function updateSubTotalPriceElem(num) {
            const subTotalElem = document.getElementById("subtotal");
            if (subTotalElem) {
                let prevAmount = (subTotalElem.textContent.length > 0) ? Number(subTotalElem.textContent.replace("$ ", "")) : 0;
                prevAmount = isNaN(prevAmount) ? 0 : prevAmount;
                const newSubTotal = Number(num) + prevAmount;
                if (subTotalElem) subTotalElem.textContent = `$ ${newSubTotal}`;
            } 
        }

        function updateTotalPriceElem(num) {
            const totalElem = document.getElementById("total");
            if (totalElem) {
                let prevAmount = (totalElem.textContent.length > 0) ? Number(totalElem.textContent.replace("$ ", "")) : 0;
                prevAmount = isNaN(prevAmount) ? 0 : prevAmount;
                const newTotal = Number(num) + prevAmount;
                if (totalElem) totalElem.textContent = `$ ${newTotal}`;
            }
        }

        function updateCartNumber() {
            const cart = JSON.parse(sessionStorage.getItem("cart"));
            const totalItems = cart.reduce((acc, cur) => cur.quantity + acc, 0);
            const cartNumberElement = document.getElementById('bagNumber');
            if (cartNumberElement) cartNumberElement.textContent = totalItems;
        }

        function isProductCombinationInCart(code) {
            const cart = JSON.parse(sessionStorage.getItem("cart"));
            const productFound = cart.find((item) => item.code === code);
            return (productFound) ? Object.keys(productFound)?.length > 0 : false;
        }
    } else {
        // Show default UI for Empty cart
        emptyCartContainer.classList.toggle("d-none");
    }
</script>